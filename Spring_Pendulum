import numpy as np

g = 9.8
L = 2

theta_0 = np.pi / 6  # initial angle
theta_dot_0 = 0  # initial velocity
time_interval = 0.01  # delta_t

x_0 = 1
x_dot_0 = 1
l = 12
k = 23
m = 3
mu = 0.1

def get_double_dot(theta, theta_dot, x_dot, x):
    return (-g * np.sin(theta) - 2* x_dot * theta_dot) /(l+x)

def get_x_double_dot(theta, theta_dot,x):
    return (l+x) * pow(theta_dot,2) - g * (1 - np.cos(theta)) - (k/m) *x

# print(get_double_dot(theta_0, theta_dot_0))

np.arange(0, 10, time_interval)


def spring_Pendulum(t):
    thetas = []
    theta_dots = []
    xs = []
    x_dots = []
    theta = theta_0  # definining theta, which is initialized to the initial angle
    theta_dot = theta_dot_0
    x = x_0
    x_dot = x_dot_0

    for time in np.arange(0, t, time_interval):  # equally spaced points
        thetas.append(theta)
        theta_dots.append(theta_dot)
        xs.append(x)
        x_dots.append(x_dot)

        theta_double_dot = get_double_dot(theta, theta_dot,x,x_dot)
        x_double_dot = get_x_double_dot(theta, theta_dot, x)

        theta += theta_dot * time_interval  # linear approximation
        theta_dot += theta_double_dot * time_interval


        x_dot = x_double_dot * time_interval
        x = x_dot * time_interval

    return thetas, theta_dots, xs, x_dots


# plot theta vs time

import matplotlib.pyplot as plt

total_time = 2  # total time in seconds

N = int(total_time / time_interval) #what does this do
print(N)
time = np.arange(0, N, time_interval)
theta_values, theta_dot_values,x_values, x_dot_values = spring_Pendulum(N)

plt.plot(time, theta_values)
# plt.plot(time, theta_dot_values)
plt.xlabel("Time (s)")
plt.ylabel("Theta (rad)")
plt.title("Theta vs Time")
plt.plot(time, x_values, label='X (m)')
plt.show()
